// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using back_end.Infra;

#nullable disable

namespace back_end.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("back_end.Models.EmpresaModel.Empresa", b =>
                {
                    b.Property<long>("EmpresaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("EmpresaId"));

                    b.Property<string>("NomeEmpresa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EmpresaId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("back_end.Models.EmpresaModel.VagasEmprego", b =>
                {
                    b.Property<long>("VagasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("VagasId"));

                    b.Property<string>("DescricaoVaga")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<string>("NomeVaga")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<decimal>("ValorPagamento")
                        .HasColumnType("numeric");

                    b.HasKey("VagasId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("VagasEmpregos");
                });

            modelBuilder.Entity("back_end.Models.UsuarioModel.Competencia", b =>
                {
                    b.Property<long>("CompetenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CompetenciaId"));

                    b.Property<string>("DescCompetencia")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("NomeCompetencia")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<long?>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("CompetenciaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Competencias");
                });

            modelBuilder.Entity("back_end.Models.UsuarioModel.Emprego", b =>
                {
                    b.Property<long>("EmpregoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("EmpregoId"));

                    b.Property<string>("DescricaoEmprego")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("NomeEmprego")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("EmpregoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Empregos");
                });

            modelBuilder.Entity("back_end.Models.UsuarioModel.Endereco", b =>
                {
                    b.Property<long>("EnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("EnderecoId"));

                    b.Property<string>("Complemento")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("EnderecoId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("back_end.Models.UsuarioModel.Usuario", b =>
                {
                    b.Property<long>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UsuarioId"));

                    b.Property<long?>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<long?>("VagasEmpregoVagasId")
                        .HasColumnType("bigint");

                    b.HasKey("UsuarioId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("VagasEmpregoVagasId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("back_end.Models.EmpresaModel.VagasEmprego", b =>
                {
                    b.HasOne("back_end.Models.EmpresaModel.Empresa", null)
                        .WithMany("VagasAbertas")
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("back_end.Models.UsuarioModel.Competencia", b =>
                {
                    b.HasOne("back_end.Models.UsuarioModel.Usuario", "Usuario")
                        .WithMany("Competencias")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("back_end.Models.UsuarioModel.Emprego", b =>
                {
                    b.HasOne("back_end.Models.UsuarioModel.Usuario", "Usuario")
                        .WithMany("EmpregosPassados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("back_end.Models.UsuarioModel.Endereco", b =>
                {
                    b.HasOne("back_end.Models.UsuarioModel.Usuario", "Usuario")
                        .WithOne("Endereco")
                        .HasForeignKey("back_end.Models.UsuarioModel.Endereco", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("back_end.Models.UsuarioModel.Usuario", b =>
                {
                    b.HasOne("back_end.Models.EmpresaModel.Empresa", null)
                        .WithMany("Funcionarios")
                        .HasForeignKey("EmpresaId");

                    b.HasOne("back_end.Models.EmpresaModel.VagasEmprego", null)
                        .WithMany("CandidadosVaga")
                        .HasForeignKey("VagasEmpregoVagasId");
                });

            modelBuilder.Entity("back_end.Models.EmpresaModel.Empresa", b =>
                {
                    b.Navigation("Funcionarios");

                    b.Navigation("VagasAbertas");
                });

            modelBuilder.Entity("back_end.Models.EmpresaModel.VagasEmprego", b =>
                {
                    b.Navigation("CandidadosVaga");
                });

            modelBuilder.Entity("back_end.Models.UsuarioModel.Usuario", b =>
                {
                    b.Navigation("Competencias");

                    b.Navigation("EmpregosPassados");

                    b.Navigation("Endereco");
                });
#pragma warning restore 612, 618
        }
    }
}
